# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ADFGX.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import random
import string

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
from PyQt5.QtCore import *

def upravText(text, CZ):
    text = text.upper()
    text = text.replace("Ě", "E")
    text = text.replace("Š", "S")
    text = text.replace("Č", "C")
    text = text.replace("Ř", "R")
    text = text.replace("Ž", "Z")
    text = text.replace("Ý", "Y")
    text = text.replace("Á", "A")
    text = text.replace("Í", "I")
    text = text.replace("É", "E")
    text = text.replace("Ť", "T")
    text = text.replace("Ď", "D")
    text = text.replace("Ú", "U")
    text = text.replace("Ů", "U")

    if CZ == False:
        text = text.replace("J", "I")
    else:
        text = text.replace("W", "V")

    return text

def upravTextVX(text):
    text = text.upper()
    text = text.replace("Ě", "E")
    text = text.replace("Š", "S")
    text = text.replace("Č", "C")
    text = text.replace("Ř", "R")
    text = text.replace("Ž", "Z")
    text = text.replace("Ý", "Y")
    text = text.replace("Á", "A")
    text = text.replace("Í", "I")
    text = text.replace("É", "E")
    text = text.replace("Ť", "T")
    text = text.replace("Ď", "D")
    text = text.replace("Ú", "U")
    text = text.replace("Ů", "U")
    return text
def upravaKlice(text):
    text = text.replace(' ', "")
    vyslednytext = []
    for i in range(0, len(text)):
        if 65 <= ord(text[i]) <= 90:
            vyslednytext.append(text[i])

    return vyslednytext

def upravaSifTextu(text):
    vyslednytext = []
    for i in range(0, len(text)):
        if 65 <= ord(text[i]) <= 90:
            vyslednytext.append(text[i])

    return vyslednytext

def upravaDegText(text):
    vyslednytext = []
    for i in range(0, len(text)):
        if 65 <= ord(text[i]) <= 90:
            vyslednytext.append(text[i])
        elif text[i] == ' ':
            vyslednytext.append(' ')

    return vyslednytext

def upravaDegTextADFGVX(text):
    vyslednytext = []
    for i in range(0, len(text)):
        if 65 <= ord(text[i]) <= 90:
            vyslednytext.append(text[i])

        elif text[i] == ' ':
            vyslednytext.append(' ')

    return vyslednytext

def upravaADFGVXTextu(text):
    vyslednytext = []
    for i in range(0, len(text)):
        if 65 <= ord(text[i]) <= 90:
            vyslednytext.append(text[i])
        elif 48 <= ord(text[i]) <= 57:
            vyslednytext.append(text[i])

    return vyslednytext

def randomAbecedaADFGX_EN():
    pismena = string.ascii_uppercase
    pismena_n = pismena.replace("J", "")
    vyslednaNahodnaAbeceda = ''.join(random.sample(pismena_n, 25))

    return vyslednaNahodnaAbeceda

def ZkontrolujAbeceduADFGX(abeceda):
    chybi = []
    pismena = string.ascii_uppercase
    pismena_n = pismena.replace("W", "")
    if len(pismena_n) != len(abeceda):
        for x in pismena_n:
            if x not in abeceda:
                chybi.append(x)
    return chybi

def randomAbecedaADFGX_CZ():
    pismena = string.ascii_uppercase
    pismena_n = pismena.replace("W", "")
    vyslednaNahodnaAbeceda = ''.join(random.sample(pismena_n, 25))

    return vyslednaNahodnaAbeceda

def randomAbecedaADFGVX():
    pismena = string.ascii_uppercase + string.digits
    vyslednaNahodnaAbeceda = ''.join(random.sample(pismena, 36))

    return vyslednaNahodnaAbeceda

def getIndex(pismeno, abeceda):
    for i in range(0, len(abeceda)):
        for j in range(0, len(abeceda)):
            if pismeno == abeceda[i][j]:
                return i, j

def returnHeaderADFGX(i,j):
    header = {0: 'A', 1: 'D', 2: 'F', 3: 'G', 4: 'X'}
    return [header[i], header[j]]

def returnHeaderADFGVX(i,j):
    header = {0: 'A', 1: 'D', 2: 'F', 3: 'G', 4: 'V', 5: 'X'}
    return header[i], header[j]

def defIndex(char):
    header = {0: 'A', 1: 'D', 2: 'F', 3: 'G', 4: 'X'}
    for i in range(len(header)):
        if header[i] == char[0]:
            return i

def defIndexADFGVX(char):
    header = {0: 'A', 1: 'D', 2: 'F', 3: 'G', 4: 'V', 5: 'X'}
    for i in range(len(header)):
        if header[i] == char[0]:
            return i

def makeArrFromMatrix(arr):
    arrFl = []
    for sublist in arr:
        for objekt in sublist:
            arrFl.append(objekt)

    return arrFl

def getIntoGrid(sifText, klic):
    grid = []
    i = 0
    while i != len(sifText):
        sub = []
        for j in range(0, len(klic)):
            if i >= len(sifText):
                grid.append(sub)
                return grid
            else:
                sub.append(sifText[i])
                i += 1

        grid.append(sub)

    return grid

def getIntoGridDef(deftext):
    grid = []
    sub = []
    for i in range(len(deftext)):
        if deftext[i] == ' ':
            grid.append(sub)
            sub = []
        else:
            sub.append(deftext[i])
    grid.append(sub)
    return grid
def transpose(gridInput, klic):
    sloupce = list(zip(*gridInput))
    nesortovanyAppend = list(zip(klic, sloupce))
    sorttext = sorted(nesortovanyAppend)
    return sorttext

def transposedef(gridInput, klic):
    nesortovanyAppend = list(zip(klic, gridInput))
    sorttext = sorted(nesortovanyAppend)
    return sorttext

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(836, 938)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setGeometry(QtCore.QRect(10, 0, 811, 921))
        self.tabWidget.setObjectName("tabWidget")
        self.ADFGX = QtWidgets.QWidget()
        self.ADFGX.setObjectName("ADFGX")
        self.Abeceda_ADFGX = QtWidgets.QTableWidget(self.ADFGX)
        self.Abeceda_ADFGX.setGeometry(QtCore.QRect(10, 30, 661, 231))
        self.Abeceda_ADFGX.setObjectName("Abeceda_ADFGX")
        self.Abeceda_ADFGX.setColumnCount(5)
        self.Abeceda_ADFGX.setRowCount(5)

        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setBold(True)
        font.setItalic(False)
        font.setUnderline(False)
        font.setWeight(75)
        item.setFont(font)
        self.Abeceda_ADFGX.setVerticalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.Abeceda_ADFGX.setVerticalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.Abeceda_ADFGX.setVerticalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.Abeceda_ADFGX.setVerticalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.Abeceda_ADFGX.setVerticalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.Abeceda_ADFGX.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.Abeceda_ADFGX.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.Abeceda_ADFGX.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.Abeceda_ADFGX.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.Abeceda_ADFGX.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.Abeceda_ADFGX.setItem(0, 0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.Abeceda_ADFGX.setItem(0, 1, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.Abeceda_ADFGX.setItem(0, 2, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.Abeceda_ADFGX.setItem(0, 3, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.Abeceda_ADFGX.setItem(0, 4, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.Abeceda_ADFGX.setItem(1, 0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.Abeceda_ADFGX.setItem(1, 1, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.Abeceda_ADFGX.setItem(1, 2, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.Abeceda_ADFGX.setItem(1, 3, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.Abeceda_ADFGX.setItem(1, 4, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.Abeceda_ADFGX.setItem(2, 0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.Abeceda_ADFGX.setItem(2, 1, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.Abeceda_ADFGX.setItem(2, 2, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.Abeceda_ADFGX.setItem(2, 3, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.Abeceda_ADFGX.setItem(2, 4, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.Abeceda_ADFGX.setItem(3, 0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.Abeceda_ADFGX.setItem(3, 1, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.Abeceda_ADFGX.setItem(3, 2, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.Abeceda_ADFGX.setItem(3, 3, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.Abeceda_ADFGX.setItem(3, 4, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.Abeceda_ADFGX.setItem(4, 0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.Abeceda_ADFGX.setItem(4, 1, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.Abeceda_ADFGX.setItem(4, 2, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.Abeceda_ADFGX.setItem(4, 3, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        self.Abeceda_ADFGX.setItem(4, 4, item)
        self.NahodnaObeceda_ADFGX = QtWidgets.QCheckBox(self.ADFGX)
        self.NahodnaObeceda_ADFGX.setGeometry(QtCore.QRect(10, 270, 211, 20))
        self.NahodnaObeceda_ADFGX.setObjectName("NahodnaObeceda_ADFGX")
        self.Popis01_ADFGX = QtWidgets.QLabel(self.ADFGX)
        self.Popis01_ADFGX.setGeometry(QtCore.QRect(10, 10, 551, 16))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.Popis01_ADFGX.setFont(font)
        self.Popis01_ADFGX.setObjectName("Popis01_ADFGX")
        self.Text_ADFGX = QtWidgets.QTextEdit(self.ADFGX)
        self.Text_ADFGX.setGeometry(QtCore.QRect(10, 300, 661, 161))
        self.Text_ADFGX.setObjectName("Text_ADFGX")
        self.klic_ADFGX = QtWidgets.QLineEdit(self.ADFGX)
        self.klic_ADFGX.setGeometry(QtCore.QRect(10, 520, 661, 22))
        self.klic_ADFGX.setObjectName("klic_ADFGX")
        self.Popis02_ADFGX = QtWidgets.QLabel(self.ADFGX)
        self.Popis02_ADFGX.setGeometry(QtCore.QRect(10, 500, 491, 16))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.Popis02_ADFGX.setFont(font)
        self.Popis02_ADFGX.setObjectName("Popis02_ADFGX")
        self.Zasifruj_ADFGX = QtWidgets.QPushButton(self.ADFGX)
        self.Zasifruj_ADFGX.setGeometry(QtCore.QRect(480, 550, 93, 28))
        self.Zasifruj_ADFGX.setObjectName("Zasifruj_ADFGX")
        self.Desifruj_ADFGX = QtWidgets.QPushButton(self.ADFGX)
        self.Desifruj_ADFGX.setGeometry(QtCore.QRect(580, 550, 93, 28))
        self.Desifruj_ADFGX.setObjectName("Desifruj_ADFGX")
        self.scrollArea = QtWidgets.QScrollArea(self.ADFGX)
        self.scrollArea.setGeometry(QtCore.QRect(10, 580, 661, 291))
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollAreaWidgetContents_ADFGX = QtWidgets.QWidget()
        self.scrollAreaWidgetContents_ADFGX.setGeometry(QtCore.QRect(0, 0, 659, 289))
        self.scrollAreaWidgetContents_ADFGX.setObjectName("scrollAreaWidgetContents_ADFGX")
        self.verticalLayoutWidget = QtWidgets.QWidget(self.scrollAreaWidgetContents_ADFGX)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(10, 10, 641, 271))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout_ADFGX = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout_ADFGX.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_ADFGX.setObjectName("verticalLayout_ADFGX")
        self.Vysledek_ADFGX = QtWidgets.QLabel(self.verticalLayoutWidget)
        self.Vysledek_ADFGX.setText("")
        self.Vysledek_ADFGX.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.Vysledek_ADFGX.setObjectName("Vysledek_ADFGX")
        self.verticalLayout_ADFGX.addWidget(self.Vysledek_ADFGX)
        self.scrollArea.setWidget(self.scrollAreaWidgetContents_ADFGX)
        self.radioButton = QtWidgets.QRadioButton(self.ADFGX)
        self.radioButton.setGeometry(QtCore.QRect(10, 470, 95, 20))
        self.radioButton.setObjectName("radioButton")
        self.radioButton.setChecked(True)
        self.radioButton_2 = QtWidgets.QRadioButton(self.ADFGX)
        self.radioButton_2.setGeometry(QtCore.QRect(70, 470, 95, 20))
        self.radioButton_2.setObjectName("radioButton_2")
        self.tabWidget.addTab(self.ADFGX, "")
        self.ADFGVX = QtWidgets.QWidget()
        self.ADFGVX.setObjectName("ADFGVX")
        self.NahodnaObeceda_ADFGVX = QtWidgets.QCheckBox(self.ADFGVX)
        self.NahodnaObeceda_ADFGVX.setGeometry(QtCore.QRect(10, 300, 211, 20))
        self.NahodnaObeceda_ADFGVX.setObjectName("NahodnaObeceda_ADFGVX")
        self.Popis02_ADFGVX = QtWidgets.QLabel(self.ADFGVX)
        self.Popis02_ADFGVX.setGeometry(QtCore.QRect(10, 530, 491, 16))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.Popis02_ADFGVX.setFont(font)
        self.Popis02_ADFGVX.setObjectName("Popis02_ADFGVX")
        self.Zasifruj_ADFGVX = QtWidgets.QPushButton(self.ADFGVX)
        self.Zasifruj_ADFGVX.setGeometry(QtCore.QRect(600, 580, 93, 28))
        self.Zasifruj_ADFGVX.setObjectName("Zasifruj_ADFGVX")
        self.klic_ADFGVX = QtWidgets.QLineEdit(self.ADFGVX)
        self.klic_ADFGVX.setGeometry(QtCore.QRect(10, 550, 781, 22))
        self.klic_ADFGVX.setObjectName("klic_ADFGVX")
        self.Text_ADFGVX = QtWidgets.QTextEdit(self.ADFGVX)
        self.Text_ADFGVX.setGeometry(QtCore.QRect(10, 330, 781, 191))
        self.Text_ADFGVX.setObjectName("Text_ADFGVX")
        self.Desifruj_ADFGVX = QtWidgets.QPushButton(self.ADFGVX)
        self.Desifruj_ADFGVX.setGeometry(QtCore.QRect(700, 580, 93, 28))
        self.Desifruj_ADFGVX.setObjectName("Desifruj_ADFGVX")
        self.Popis01_ADFGVX = QtWidgets.QLabel(self.ADFGVX)
        self.Popis01_ADFGVX.setGeometry(QtCore.QRect(10, 10, 551, 16))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.Popis01_ADFGVX.setFont(font)
        self.Popis01_ADFGVX.setObjectName("Popis01_ADFGVX")
        self.scrollArea_2 = QtWidgets.QScrollArea(self.ADFGVX)
        self.scrollArea_2.setGeometry(QtCore.QRect(10, 620, 781, 251))
        self.scrollArea_2.setWidgetResizable(True)
        self.scrollArea_2.setObjectName("scrollArea_2")
        self.scrollAreaWidgetContents_ADFGVX = QtWidgets.QWidget()
        self.scrollAreaWidgetContents_ADFGVX.setGeometry(QtCore.QRect(0, 0, 779, 249))
        self.scrollAreaWidgetContents_ADFGVX.setObjectName("scrollAreaWidgetContents_ADFGVX")
        self.verticalLayoutWidget_2 = QtWidgets.QWidget(self.scrollAreaWidgetContents_ADFGVX)
        self.verticalLayoutWidget_2.setGeometry(QtCore.QRect(10, 10, 761, 231))
        self.verticalLayoutWidget_2.setObjectName("verticalLayoutWidget_2")
        self.verticalLayout_ADFGVX = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_2)
        self.verticalLayout_ADFGVX.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_ADFGVX.setObjectName("verticalLayout_ADFGVX")
        self.Vysledek_ADFGVX = QtWidgets.QLabel(self.verticalLayoutWidget_2)
        self.Vysledek_ADFGVX.setText("")
        self.Vysledek_ADFGVX.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.Vysledek_ADFGVX.setObjectName("Vysledek_ADFGVX")
        self.verticalLayout_ADFGVX.addWidget(self.Vysledek_ADFGVX)
        self.scrollArea_2.setWidget(self.scrollAreaWidgetContents_ADFGVX)
        self.Abeceda_ADFGVX = QtWidgets.QTableWidget(self.ADFGVX)
        self.Abeceda_ADFGVX.setGeometry(QtCore.QRect(10, 30, 781, 261))
        self.Abeceda_ADFGVX.setObjectName("Abeceda_ADFGVX")
        self.Abeceda_ADFGVX.setColumnCount(6)
        self.Abeceda_ADFGVX.setRowCount(6)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.Abeceda_ADFGVX.setVerticalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.Abeceda_ADFGVX.setVerticalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.Abeceda_ADFGVX.setVerticalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.Abeceda_ADFGVX.setVerticalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.Abeceda_ADFGVX.setVerticalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.Abeceda_ADFGVX.setVerticalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.Abeceda_ADFGVX.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.Abeceda_ADFGVX.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.Abeceda_ADFGVX.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.Abeceda_ADFGVX.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.Abeceda_ADFGVX.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        item.setFont(font)
        self.Abeceda_ADFGVX.setHorizontalHeaderItem(5, item)
        self.tabWidget.addTab(self.ADFGVX, "")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.Vysledek_ADFGVX.setWordWrap(True)
        self.Vysledek_ADFGX.setWordWrap(True)
        self.Vysledek_ADFGX.setTextInteractionFlags(Qt.TextSelectableByMouse)
        self.Vysledek_ADFGVX.setTextInteractionFlags(Qt.TextSelectableByMouse)

        self.Zasifruj_ADFGX.clicked.connect(self.sif_ADFGX)
        self.Desifruj_ADFGX.clicked.connect(self.def_ADFGX)
        self.Zasifruj_ADFGVX.clicked.connect(self.sif_ADFGVX)
        self.Desifruj_ADFGVX.clicked.connect(self.def_ADFGVX)
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        item = self.Abeceda_ADFGX.verticalHeaderItem(0)
        item.setText(_translate("MainWindow", "A"))
        item = self.Abeceda_ADFGX.verticalHeaderItem(1)
        item.setText(_translate("MainWindow", "D"))
        item = self.Abeceda_ADFGX.verticalHeaderItem(2)
        item.setText(_translate("MainWindow", "F"))
        item = self.Abeceda_ADFGX.verticalHeaderItem(3)
        item.setText(_translate("MainWindow", "G"))
        item = self.Abeceda_ADFGX.verticalHeaderItem(4)
        item.setText(_translate("MainWindow", "X"))
        item = self.Abeceda_ADFGX.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "A"))
        item = self.Abeceda_ADFGX.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "D"))
        item = self.Abeceda_ADFGX.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "F"))
        item = self.Abeceda_ADFGX.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "G"))
        item = self.Abeceda_ADFGX.horizontalHeaderItem(4)
        item.setText(_translate("MainWindow", "X"))
        __sortingEnabled = self.Abeceda_ADFGX.isSortingEnabled()
        self.Abeceda_ADFGX.setSortingEnabled(False)
        self.Abeceda_ADFGX.setSortingEnabled(__sortingEnabled)
        self.NahodnaObeceda_ADFGX.setText(_translate("MainWindow", "Vygenrovat abecedu náhodně"))
        self.Popis01_ADFGX.setText(_translate("MainWindow", "Zadejte abecedu nebo zvolte možnost generace náhodné abecedy:"))
        self.Text_ADFGX.setPlaceholderText(_translate("MainWindow", "Zadejte text k zašifrování nebo dešifrování"))
        self.klic_ADFGX.setPlaceholderText(_translate("MainWindow", "Zadejte klíč k šifrování nebo dešifrování textu"))
        self.Popis02_ADFGX.setText(_translate("MainWindow", "Klíč:"))
        self.Zasifruj_ADFGX.setText(_translate("MainWindow", "Zašifruj"))
        self.Desifruj_ADFGX.setText(_translate("MainWindow", "Dešifruj"))
        self.radioButton.setText(_translate("MainWindow", "CZ"))
        self.radioButton_2.setText(_translate("MainWindow", "EN"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.ADFGX), _translate("MainWindow", "ADFGX"))
        self.NahodnaObeceda_ADFGVX.setText(_translate("MainWindow", "Vygenrovat abecedu náhodně"))
        self.Popis02_ADFGVX.setText(_translate("MainWindow", "Klíč:"))
        self.Zasifruj_ADFGVX.setText(_translate("MainWindow", "Zašifruj"))
        self.klic_ADFGVX.setPlaceholderText(_translate("MainWindow", "Zadejte klíč k šifrování nebo dešifrování textu"))
        self.Text_ADFGVX.setPlaceholderText(_translate("MainWindow", "Zadejte text k zašifrování nebo dešifrování"))
        self.Desifruj_ADFGVX.setText(_translate("MainWindow", "Dešifruj"))
        self.Popis01_ADFGVX.setText(_translate("MainWindow", "Zadejte abecedu nebo zvolte možnost generace náhodné abecedy:"))
        item = self.Abeceda_ADFGVX.verticalHeaderItem(0)
        item.setText(_translate("MainWindow", "A"))
        item = self.Abeceda_ADFGVX.verticalHeaderItem(1)
        item.setText(_translate("MainWindow", "D"))
        item = self.Abeceda_ADFGVX.verticalHeaderItem(2)
        item.setText(_translate("MainWindow", "F"))
        item = self.Abeceda_ADFGVX.verticalHeaderItem(3)
        item.setText(_translate("MainWindow", "G"))
        item = self.Abeceda_ADFGVX.verticalHeaderItem(4)
        item.setText(_translate("MainWindow", "V"))
        item = self.Abeceda_ADFGVX.verticalHeaderItem(5)
        item.setText(_translate("MainWindow", "X"))
        item = self.Abeceda_ADFGVX.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "A"))
        item = self.Abeceda_ADFGVX.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "D"))
        item = self.Abeceda_ADFGVX.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "F"))
        item = self.Abeceda_ADFGVX.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "G"))
        item = self.Abeceda_ADFGVX.horizontalHeaderItem(4)
        item.setText(_translate("MainWindow", "V"))
        item = self.Abeceda_ADFGVX.horizontalHeaderItem(5)
        item.setText(_translate("MainWindow", "X"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.ADFGVX), _translate("MainWindow", "ADFGVX"))

    def sif_ADFGX(self):
        self.Vysledek_ADFGX.setText("")
        textSmezery = []
        text = self.Text_ADFGX.toPlainText()
        CZ = False
        if self.radioButton.isChecked():
            CZ = True
        klic = self.klic_ADFGX.text()
        abeceda = [["0" for i in range(5)] for j in range(5)]
        vysSifText = []
        if len(text) <= 0 or len(klic) <= 0:
            self.show_popUpEmpty()
            return 0
        if self.NahodnaObeceda_ADFGX.isChecked():
            if self.radioButton.isChecked():
                abecedaR = randomAbecedaADFGX_CZ()
                x = 0
                for i in range(0, 5):
                    for j in range(0, 5):
                        abeceda[i][j] = abecedaR[x]
                        x += 1
            else:
                abecedaR = randomAbecedaADFGX_EN()
                x = 0
                for i in range(0, 5):
                    for j in range(0, 5):
                        abeceda[i][j] = abecedaR[x]
                        x += 1
        else:
            for i in range(0, 5):
                for j in range(0, 5):
                    if self.Abeceda_ADFGX.item(i,j).text() != "":
                        if len(self.Abeceda_ADFGX.item(i,j).text()) > 1:
                            abeceda[i][j] = self.Abeceda_ADFGX.item(i, j).text()
                        else:
                            self.ViceZnakuVBunce()
                            return 0
                    else:
                        self.prazdnaAbeceda()
                        return 0

        if self.NahodnaObeceda_ADFGX.isChecked():
            for i in range(0, 5):
                for j in range(0, 5):
                    self.Abeceda_ADFGX.setItem(i, j,  QtWidgets.QTableWidgetItem(abeceda[i][j]))

        text = upravText(text, CZ)
        text = upravaSifTextu(text)
        klic = upravText(klic, CZ)
        klic = upravaKlice(klic)

        self.Vysledek_ADFGX.setText("Upravny zdany text k sifrovani:")

        for i in range(0, len(text)):
            self.Vysledek_ADFGX.setText(self.Vysledek_ADFGX.text() + text[i])

        self.Vysledek_ADFGX.setText(self.Vysledek_ADFGX.text() + "\nUpravny zdany klic:")

        for i in range(0, len(klic)):
            self.Vysledek_ADFGX.setText(self.Vysledek_ADFGX.text() + klic[i])

        for i in range(0, len(text)):
            o, p = getIndex(text[i], abeceda)
            siftext = returnHeaderADFGX(o, p)
            vysSifText.append(siftext)

        vysSifText = makeArrFromMatrix(vysSifText)

        if len(klic) > len(vysSifText):
            self.show_popUpKlic()
            return 0

        gridtext = getIntoGrid(vysSifText, klic)
        sorttext = transpose(gridtext, klic)
        serazenyKlic, vyslednytext = list(zip(*sorttext))

        self.Vysledek_ADFGX.setText(self.Vysledek_ADFGX.text() + "\nZasifrovany text je: ")
        for x in vyslednytext:
            for i in x:
                self.Vysledek_ADFGX.setText(self.Vysledek_ADFGX.text() + i)
            self.Vysledek_ADFGX.setText(self.Vysledek_ADFGX.text() + " ")

    def def_ADFGX(self):
        self.Vysledek_ADFGX.setText("")
        text = self.Text_ADFGX.toPlainText()
        CZ = False
        if self.radioButton.isChecked():
            CZ = True
        klic = self.klic_ADFGX.text()
        abeceda = [["0" for i in range(5)] for j in range(5)]
        vysSifText = []
        if len(text) <= 0 or len(klic) <= 0:
            self.show_popUpEmpty()
            return 0
        if self.NahodnaObeceda_ADFGX.isChecked():
            self.show_popUpNahodne()
            self.NahodnaObeceda_ADFGX.setChecked(False)
            return 0

        else:
            for i in range(0, 5):
                for j in range(0, 5):
                    if self.Abeceda_ADFGX.item(i, j).text() != "":
                        if len(self.Abeceda_ADFGX.item(i, j).text()) > 1:
                            abeceda[i][j] = self.Abeceda_ADFGX.item(i, j).text()
                        else:
                            self.ViceZnakuVBunce()
                            return 0
                    else:
                        self.prazdnaAbeceda()
                        return 0

        text = upravText(text, CZ)
        text = upravaDegText(text)
        klic = upravText(klic, CZ)
        klic = upravaKlice(klic)

        self.Vysledek_ADFGX.setText(self.Vysledek_ADFGX.text() + "Upravny zdany text:")
        for i in range(0, len(text)):
            self.Vysledek_ADFGX.setText(self.Vysledek_ADFGX.text() + text[i])

        self.Vysledek_ADFGX.setText(self.Vysledek_ADFGX.text() + "\nUpravny zdany klic:")

        for i in range(0, len(klic)):
            self.Vysledek_ADFGX.setText(self.Vysledek_ADFGX.text() + klic[i])

        gridtext = getIntoGridDef(text)
        sezareznytext = transposedef(gridtext, klic)
        sklic, vyslednytext = list(zip(*sezareznytext))
        vyslednytext = list(zip(*vyslednytext))
        vyslednytext2 = makeArrFromMatrix(vyslednytext)
        if len(klic) > len(vyslednytext2):
            self.show_popUpKlic()
            return 0
        vysString = []
        x = 0

        while x < len(vyslednytext2) - 1:
            index1 = defIndex(vyslednytext2[x])
            index2 = defIndex(vyslednytext2[x+1])
            sub = abeceda[index1][index2]
            vysString.append(sub)
            x += 2
        self.Vysledek_ADFGX.setText(self.Vysledek_ADFGX.text() + "\nDesifrovany text je: ")

        for x in range(len(vysString)):
            self.Vysledek_ADFGX.setText(self.Vysledek_ADFGX.text() + vysString[x])

    def sif_ADFGVX(self):
        self.Vysledek_ADFGVX.setText("")
        text = self.Text_ADFGVX.toPlainText()
        klic = self.klic_ADFGVX.text()
        abeceda = [["0" for i in range(6)] for j in range(6)]
        vysSifText = []
        if len(text) <=  0 or len(klic) <=  0:
            self.show_popUpEmpty()
            return 0
        if self.NahodnaObeceda_ADFGVX.isChecked():
            abecedaR = randomAbecedaADFGVX()
            x = 0
            for i in range(0, 6):
                for j in range(0, 6):
                    abeceda[i][j] = abecedaR[x]
                    x += 1
        else:
            for i in range(0, 6):
                for j in range(0, 6):
                    if self.Abeceda_ADFGX.item(i, j).text() != "":
                        if len(self.Abeceda_ADFGX.item(i, j).text()) > 1:
                            abeceda[i][j] = self.Abeceda_ADFGX.item(i, j).text()
                        else:
                            self.ViceZnakuVBunce()
                            return 0
                    else:
                        self.prazdnaAbeceda()
                        return 0

        if self.NahodnaObeceda_ADFGVX.isChecked():
            for i in range(0, 6):
                for j in range(0, 6):
                    self.Abeceda_ADFGVX.setItem(i, j, QtWidgets.QTableWidgetItem(abeceda[i][j]))

        text = upravTextVX(text)
        text = upravaADFGVXTextu(text)
        klic = upravTextVX(klic)
        klic = upravaKlice(klic)

        self.Vysledek_ADFGVX.setText("Upravny zdany text k sifrovani:")

        for i in range(0, len(text)):
            self.Vysledek_ADFGVX.setText(self.Vysledek_ADFGVX.text() + text[i])

        self.Vysledek_ADFGVX.setText(self.Vysledek_ADFGVX.text() + "\nUpravny zdany klic:")

        for i in range(0, len(klic)):
            self.Vysledek_ADFGVX.setText(self.Vysledek_ADFGVX.text() + klic[i])

        for i in range(0, len(text)):
            o, p = getIndex(text[i], abeceda)
            siftext = returnHeaderADFGVX(o, p)
            vysSifText.append(siftext)

        vysSifText = makeArrFromMatrix(vysSifText)
        if len(klic) > len(vysSifText):
            self.show_popUpKlic()
            return 0
        gridtext = getIntoGrid(vysSifText, klic)
        sorttext = transpose(gridtext, klic)
        serazenyKlic, vyslednytext = list(zip(*sorttext))

        self.Vysledek_ADFGVX.setText(self.Vysledek_ADFGVX.text() + "\nZasifrovany text je: ")
        for x in vyslednytext:
            for i in x:
                self.Vysledek_ADFGVX.setText(self.Vysledek_ADFGVX.text() + i)
            self.Vysledek_ADFGVX.setText(self.Vysledek_ADFGVX.text() + " ")

    def def_ADFGVX(self):
        self.Vysledek_ADFGVX.setText("")
        text = self.Text_ADFGVX.toPlainText()
        klic = self.klic_ADFGVX.text()
        abeceda = [["0" for i in range(6)] for j in range(6)]
        vysSifText = []
        if len(text) <= 0 or len(klic) <= 0:
            self.show_popUpEmpty()
            return 0
        if self.NahodnaObeceda_ADFGVX.isChecked():
            self.show_popUpNahodne()
            self.NahodnaObeceda_ADFGVX.setChecked(False)
        else:
            for i in range(0, 5):
                for j in range(0, 5):
                    if self.Abeceda_ADFGX.item(i, j).text() != "":
                        if len(self.Abeceda_ADFGX.item(i, j).text()) > 1:
                            abeceda[i][j] = self.Abeceda_ADFGX.item(i, j).text()
                        else:
                            self.ViceZnakuVBunce()
                            return 0
                    else:
                        self.prazdnaAbeceda()
                        return 0

        text = upravTextVX(text)
        text = upravaDegTextADFGVX(text)
        klic = upravTextVX(klic)
        klic = upravaKlice(klic)

        self.Vysledek_ADFGVX.setText("Upravny zdany text k desifrovani:")

        for i in range(0, len(text)):
            self.Vysledek_ADFGVX.setText(self.Vysledek_ADFGVX.text() + text[i])

        self.Vysledek_ADFGVX.setText(self.Vysledek_ADFGVX.text() + "\nUpravny zdany klic:")

        for i in range(0, len(klic)):
            self.Vysledek_ADFGVX.setText(self.Vysledek_ADFGVX.text() + klic[i])

        gridtext = getIntoGridDef(text)
        sezareznytext = transposedef(gridtext, klic)
        sklic, vyslednytext = list(zip(*sezareznytext))
        vyslednytext = list(zip(*vyslednytext))
        vyslednytext2 = makeArrFromMatrix(vyslednytext)

        if len(klic) > len(vyslednytext2):
            self.show_popUpKlic()
            return 0

        vysString = []
        x = 0

        while x < len(vyslednytext2) - 1:
            index1 = defIndexADFGVX(vyslednytext2[x])
            index2 = defIndexADFGVX(vyslednytext2[x+1])
            sub = abeceda[index1][index2]
            vysString.append(sub)
            x += 2

        self.Vysledek_ADFGVX.setText(self.Vysledek_ADFGVX.text() + "\nDesifrovany text je: ")

        for x in range(len(vysString)):
            self.Vysledek_ADFGVX.setText(self.Vysledek_ADFGVX.text() + vysString[x])

    def show_popUpEmpty(self):
        msgbox = QMessageBox()
        msgbox.setWindowTitle("Textové pole je prázdné")
        msgbox.setText("Textove pole nesmí být prázdne")
        msgbox.setIcon(QMessageBox.Warning)
        msgbox.setStandardButtons(QMessageBox.Ok)

        x = msgbox.exec_()

    def show_popUpKlic(self):
        msgbox = QMessageBox()
        msgbox.setWindowTitle("Dlouhy klic")
        msgbox.setText("Delka klice nesmi byt delsi nez je dvojnasobna delka zadaneho upraveneho textu")
        msgbox.setIcon(QMessageBox.Warning)
        msgbox.setStandardButtons(QMessageBox.Ok)

        x = msgbox.exec_()

    def show_popUpNahodne(self):
        msgbox = QMessageBox()
        msgbox.setWindowTitle("Zaskrtunta nahodna abeceda")
        msgbox.setText("Pri desifrovani nesmi byt zaskrtnuta moznost nahodne abecedy")
        msgbox.setIcon(QMessageBox.Warning)
        msgbox.setStandardButtons(QMessageBox.Ok)

        x = msgbox.exec_()

    def prazdnaAbeceda(self):
        msgbox = QMessageBox()
        msgbox.setWindowTitle("Prazdna ABECEDA")
        msgbox.setText("Prosim doplnte abecedu do tabulky, nebo zvolte moznost nahodne abecedy")
        msgbox.setIcon(QMessageBox.Warning)
        msgbox.setStandardButtons(QMessageBox.Ok)

        x = msgbox.exec_()

    def ViceZnakuVBunce(self):
        msgbox = QMessageBox()
        msgbox.setWindowTitle("Vice znaku v jeden bunce")
        msgbox.setText("V jedne bunce tabulky muze byt pouze jeden znak abecedy")
        msgbox.setIcon(QMessageBox.Warning)
        msgbox.setStandardButtons(QMessageBox.Ok)

        x = msgbox.exec_()
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
